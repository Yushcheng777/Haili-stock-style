name: Generate Backtest Report

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      equity_curve_path:
        description: 'Path to equity curve CSV file'
        required: true
        default: 'backtest_results/equity_curve.csv'
      debug_columns:
        description: 'Print CSV schema and first 5 rows for debugging'
        required: false
        default: 'false'
  push:
    paths:
      - 'backtest_results/equity_curve.csv'

env:
  DEFAULT_EQUITY_PATH: backtest_results/equity_curve.csv

jobs:
  generate-report:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install base dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy matplotlib jinja2

      - name: Install optional dependencies (soft fail)
        run: |
          pip install markdown weasyprint reportlab || true

      - name: Resolve equity path
        # If triggered by workflow_dispatch, use the provided input; otherwise fallback to default
        env:
          INPUT_PATH: ${{ github.event.inputs.equity_curve_path }}
          DEFAULT_PATH: ${{ env.DEFAULT_EQUITY_PATH }}
        run: |
          EQUITY_PATH="${INPUT_PATH:-$DEFAULT_PATH}"
          echo "Resolved EQUITY_PATH: $EQUITY_PATH"
          echo "EQUITY_PATH=$EQUITY_PATH" >> "$GITHUB_ENV"

      - name: Check if equity curve exists (create sample if missing)
        run: |
          if [ ! -f "$EQUITY_PATH" ]; then
            echo "Equity curve file not found: $EQUITY_PATH"
            echo "Creating sample data for demonstration..."
            mkdir -p "$(dirname "$EQUITY_PATH")"
            python - << 'PY'
          import os
          import pandas as pd
          import numpy as np

          equity_path = os.environ.get("EQUITY_PATH", "backtest_results/equity_curve.csv")
          os.makedirs(os.path.dirname(equity_path), exist_ok=True)
          
          # Generate sample equity curve data
          dates = pd.date_range(start='2023-01-01', end='2023-12-31', freq='D')
          # Simulate portfolio growth with some volatility
          returns = np.random.normal(0.0005, 0.02, len(dates))  # ~0.05% daily mean with 2% vol
          portfolio_values = [100000.0]  # Start with $100k
          for ret in returns[1:]:
              portfolio_values.append(portfolio_values[-1] * (1.0 + ret))
          
          df = pd.DataFrame({
              'Date': dates,
              'PortfolioValue': portfolio_values
          })
          df.to_csv(equity_path, index=False)
          print(f"Created sample equity curve at: {equity_path}")
          PY
          fi

      - name: Debug CSV schema (if enabled)
        if: github.event.inputs.debug_columns == 'true'
        run: |
          echo "🔍 Debug mode: Analyzing CSV structure"
          echo "📁 File: $EQUITY_PATH"
          if [ -f "$EQUITY_PATH" ]; then
            echo "📊 CSV Columns and first 5 rows:"
            python - << 'PY'
          import os
          import pandas as pd
          equity_path = os.environ.get("EQUITY_PATH", "backtest_results/equity_curve.csv")
          try:
              df = pd.read_csv(equity_path)
              print(f"Columns: {list(df.columns)}")
              print("\nFirst 5 rows:")
              print(df.head())
              print(f"\nShape: {df.shape}")
              print(f"Data types:\n{df.dtypes}")
          except Exception as e:
              print(f"Error reading CSV: {e}")
          PY
          else
            echo "❌ CSV file not found: $EQUITY_PATH"
          fi

      - name: Generate backtest report
        run: |
          python generate_backtest_report.py --input-dir backtest_results

      - name: Upload report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backtest-report
          path: |
            backtest_results/report.md
            backtest_results/report.html
            backtest_results/report.pdf
            backtest_results/metrics.json
            backtest_results/charts/
          if-no-files-found: ignore

      - name: Report generation completed (artifacts-only mode)
        run: |
          echo "✅ Backtest report generation completed successfully"
          echo "📁 Reports are available as workflow artifacts — no Git operations performed"