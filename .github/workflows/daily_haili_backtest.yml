name: Daily Haili Backtest

# Trigger configuration
on:
  # Schedule to run daily at 01:00 UTC
  # To change the schedule time, modify the cron expression below:
  # Format: 'minute hour day-of-month month day-of-week'
  # Current: '0 1 * * *' means every day at 01:00 UTC
  # Examples: '30 2 * * *' = 02:30 UTC, '0 9 * * 1-5' = 09:00 UTC weekdays only
  schedule:
    - cron: '0 1 * * *'
  
  # Allow manual trigger with optional ticker input
  workflow_dispatch:
    inputs:
      tickers:
        description: 'Space-separated ticker symbols (e.g., "000001.SZ 600000.SS")'
        required: false
        type: string

jobs:
  run-backtest:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Python 3.11
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Install required dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install akshare pandas numpy matplotlib

      # Determine which tickers to run
      - name: Determine Tickers
        id: tickers
        run: |
          TICKERS=""
          
          # First priority: workflow input tickers
          if [ -n "${{ github.event.inputs.tickers }}" ]; then
            TICKERS="${{ github.event.inputs.tickers }}"
            echo "Using workflow input tickers: $TICKERS"
          # Second priority: read from data/tickers.txt if it exists
          elif [ -f "data/tickers.txt" ]; then
            TICKERS=$(cat data/tickers.txt | tr '\n' ' ' | xargs)
            echo "Using tickers from data/tickers.txt: $TICKERS"
          # Default fallback: 000001.SZ
          else
            TICKERS="000001.SZ"
            echo "Using default ticker: $TICKERS"
          fi
          
          echo "tickers=$TICKERS" >> $GITHUB_OUTPUT

      # Run the backtest script with determined tickers
      - name: Run Haili Backtest
        run: |
          python haili_backtest.py --tickers ${{ steps.tickers.outputs.tickers }}
      
      # Run the strategy selection to generate candidates_haili_style.csv
      - name: Run Haili Strategy Selection
        run: |
          python haili_strategy.py

      # Upload the resulting CSV files as artifacts
      - name: Upload Backtest Results
        uses: actions/upload-artifact@v4
        with:
          name: haili-backtest-results-${{ github.run_number }}
          path: |
            *_haili_detailed_*.csv
            candidates_haili_style.csv
          if-no-files-found: warn
